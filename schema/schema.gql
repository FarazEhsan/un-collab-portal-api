# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Skill {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!
  _id: ID!

  """Name of the skill"""
  name: String!

  """Level of the skill"""
  level: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Project {
  """Name of the project"""
  name: String!

  """Description of the project"""
  description: String!

  """Related SDGs of the project"""
  relatedSDGs: String

  """Pictures"""
  pictures: String
}

type User {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!
  _id: ID!

  """Name of the User"""
  name: String!

  """Username for the portal"""
  userName: String!

  """User Email"""
  email: String!

  """Contact number of the user"""
  contactNumber: String!
  skills: [Skill!]!

  """Projects of the user"""
  projects: [Project!]
}

type SDG {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!

  """ID of the SDG"""
  _id: ID!

  """Name of the SDG"""
  name: String!

  """Code of the SDG"""
  code: String!

  """Short description of the SDG"""
  shortDescription: String!

  """Description of the SDG"""
  description: String

  """Pictures related to the SDG"""
  pictures: [String!]
}

type Reaction {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!

  """Type of the reaction enum: [like, dislike]"""
  type: String!
  user: User!

  """Comment of the reaction"""
  comment: Comment

  """Topic of the reaction"""
  topic: String
}

type Topic {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!

  """Id of the topic"""
  _id: ID!

  """Title of the topic"""
  title: String!

  """Description of the topic"""
  description: String!

  """Author of the topic"""
  author: User!
  comments(limit: Int, skip: Int): [Comment!]!
  commentsCount: Int!
}

type Comment {
  """
  Operation performed on the document, 0 for create, 1 for update, 2 for delete
  """
  updOperation: Float!

  """Time of creation of the document"""
  createdAt: DateTime!

  """Time of updation of the document"""
  updatedAt: DateTime!

  """Id of the topic"""
  _id: ID!

  """Text of the comment"""
  text: String!
  author: User!

  """Topic of the comment"""
  topic: Topic!

  """Parent comment of the comment"""
  parentComment: Comment!
  reactions: [Reaction!]!
}

input ProjectInput {
  """Name of the project"""
  name: String!

  """Description of the project"""
  description: String!

  """Related SDGs of the project"""
  relatedSDGs: String = ""

  """Pictures"""
  pictures: String = ""
}

type Query {
  allusers: [User!]!
  user(id: String!): User!
  allskills: [Skill!]!
  skill(id: Int!): Skill!
  alltopics: [Topic!]!
  topic(id: String!): Topic!
  allcomments: [Comment!]!
  comment(id: String!): Comment!
  allreactions: [Reaction!]!
  reaction(id: String!): Reaction!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createSkill(createSkillInput: CreateSkillInput!): Skill!
  removeSkill(id: Int!): Skill!
  create(createSDGInput: CreateSDGInput!): SDG!
  createComment(createCommentInput: CreateCommentDTO!): Comment!
  createReaction(createReactionInput: CreateReactionDTO!): Reaction!
}

input CreateUserInput {
  """Name of the User"""
  name: String!

  """Username for the portal"""
  userName: String!

  """User Email"""
  email: String!

  """Contact number of the user"""
  contactNumber: String

  """Skills of the user"""
  skills: [ID!]

  """Projects of the user"""
  projects: [ProjectInput!]
}

input UpdateUserInput {
  """Name of the User"""
  name: String

  """Username for the portal"""
  userName: String

  """User Email"""
  email: String

  """Contact number of the user"""
  contactNumber: String

  """Skills of the user"""
  skills: [ID!]

  """Projects of the user"""
  projects: [ProjectInput!]
  id: Int!
}

input CreateSkillInput {
  """Name of the skill"""
  name: String!

  """Level of the skill"""
  level: String!
}

input CreateSDGInput {
  """Name of the SDG"""
  name: String!

  """Code of the SDG"""
  code: String!

  """Short description of the SDG"""
  shortDescription: String!

  """Description of the SDG"""
  description: String = ""

  """Pictures related to the SDG"""
  pictures: [String!] = []
}

input CreateCommentDTO {
  """Text of the comment"""
  text: String!

  """Author/User of the comment"""
  author: ID!

  """Topic of the comment"""
  topic: ID!

  """Parent comment of the comment"""
  parentComment: ID!

  """Reactions of the comment"""
  reactions: [ID!]!
}

input CreateReactionDTO {
  """Type of the reaction enum: [like, dislike]"""
  type: ReactionType!

  """User of the reaction"""
  user: ID!

  """Comment of the reaction"""
  comment: ID

  """Topic of the reaction"""
  topic: ID
}

"""The basic reactions"""
enum ReactionType {
  Like
  Dislike
}